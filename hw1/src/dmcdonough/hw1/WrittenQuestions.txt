Daniel McDonough
HW1
Written Questions

Stack Experiments:
------------------

1. The program reads in 6 + 8.
    pushes 6 as double into the var stack.
    loads + into the op stack.
    pushes 8 as double into the var stack.
    final stacks looks like so:
	op: +
	var: 6.0 8.0
2. The program reads in -99
	pushes -99 onto the var stack as a double
	final stacks looks like so:
	op: empty
	var: -99.0
3. The program reads in - 99
	pushes - into the op stack
	pushes 99 into the var stack as a double
	final stacks looks like so:
	op: -
	var: 99.0
4. The program reads in "( ( 2 / 3 ) + ( 3 * 7 ) )"
	ignores (
	ignores (
	pushes 2 onto the var stack as a double
	pushes / onto the op stack
	pushes 3 onto the var stack as a double
	reads )
		pops 3 off var stack
		pops / off op stack
		computes 2/3 (0.6666666666666666) and saves it as a double, replacing 2 on the var stack
	pushes + onto the op stack
	ignores )
	pushes 3 onto the var stack as a double
	pushes * onto the op stack
	pushes 7 onto the var stack as a double
	reads )
		pops 7 off the var stack
		pops * off the op stack
		computes 3*7 (21.0) and saves it as a double replacing 3 on the var stack
	reads ) 
		pops 21 off the var stack
		pops + off the op stack
		computes 0.6666666666666666+21.0
	final stacks looks like so:
	op: empty
	var: 21.666666666666668

5. The program reads "( 2 + ( 3 + ) 4 )" 
	ignores (
   	pushes 2 onto the var stack as a double
	pushes + onto the op stack
	ignores (
	pushes 3 onto the var stack as a double
	pushes + onto the op stack
	reads )
		pops 3 off the var stack
		pops + off the op stack
		computes 2+3 (5.0) and saves it as a double replacing 2 on the var stack
	pushes 4 onto the var stack as a double
	reads )
		pops 4.0 off the var stack
		pops + off the op stack
		computes 5+4 (9.0) and saves it as a double replacing 5.0 on the var stack
	final stacks looks like so:
	op: empty
	var: 9.0
	
6. The program reads "( floor ( 5 ^ 0.5 ) )"
	ignores (
	pushes floor onto the op stack
	ignores (
	pushes 5 onto the var stack as a double
	pushes ^ onto the op stack
	pushes 0.5 onto the var stack as a double
	reads )
		pops 0.5 off the var stack
		pops ^ of the ops stack
		computes 5^0.5 (2.23606797749979) and saves the value as a double replacing 5.0 on the var stack
	reads )
		computes floor(2.23606797749979) (2.0)
	final stacks looks like so:
	op: empty
	var: 2.0



Binary Array Search Exercise:
-----------------------------

1.  To determine the repeated value, you must first clone each element of the first (0th) row. Then through a binary search compare each element from the second row (1st)
	and the first (0th) row. Until a copy of an item is found. 
	
	ie:
	for(int i = 0; i<M;i++){
		cache = array[0][i]
		for(int j = 0; j<M;j++){
			other cache = array[1][j]
			if(cache == other cache){
			return locations of #
			}
			
		}
		
	}
	
	Then the program would continue through array and search each row to 
	find the repeating num and go to the next row when it is found
	
2. It would take M! array comparisons in the worst case scenario to find the repeating number. 
   Then (M*(N-2)) comparisons for finding the other locations using binary search in the worst case scenario.
   total M^M + (M*(N-2))

3. Worst EX:
	Value = 12
	[
	 1,2,3,12,
	 4,5,6,12,
	 7,8,9,12,
	 10,11,13,12
	 14,15,16,12
	 17,18,19,12
	]
	 
4. Best EX:

	Special value = 100
	[
	 12,2,3,1,
	 12,5,6,4,
	 12,8,9,10,
	 12,11,13,14
	 12,15,16,17
	 12,18,19,20
	]
	 
	 Min lookup:
	 	load 0,0 and 1,0 and find that they are equal. (2)
	 	Then for check rows 2,3,4, and 5 such 
	 	that 2,0 3,0 4,0 and 5,0 are loaded first. (4)
	 	total: (6 look ups)
	 		 
5. Average case:
	(M/2)^(M/2) + ((M*(N-2))/2) = 3^3 + (6*(4-2))/2) = 27 + 6 = 33
	33 avg. case


